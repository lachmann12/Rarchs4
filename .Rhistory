numberInstances = 2
system(paste0("aws autoscaling update-auto-scaling-group --auto-scaling-group-name EC2ContainerService-kallisto-new-EcsInstanceAsg-M7FCO0OFAR4T --min-size ",numberInstances," --max-size ",numberInstances," --desired-capacity ", numberInstances))
system("source ~/.bash_profile")
numberInstances = 2
system(paste0("aws autoscaling update-auto-scaling-group --auto-scaling-group-name EC2ContainerService-kallisto-new-EcsInstanceAsg-M7FCO0OFAR4T --min-size ",numberInstances," --max-size ",numberInstances," --desired-capacity ", numberInstances))
system("source ~/.bash_profile; aws help")
numberInstances = 2
system(paste0("source ~/.bash_profile; aws autoscaling update-auto-scaling-group --auto-scaling-group-name EC2ContainerService-kallisto-new-EcsInstanceAsg-M7FCO0OFAR4T --min-size ",numberInstances," --max-size ",numberInstances," --desired-capacity ", numberInstances))
numberInstances = 0
system(paste0("source ~/.bash_profile; aws autoscaling update-auto-scaling-group --auto-scaling-group-name EC2ContainerService-kallisto-new-EcsInstanceAsg-M7FCO0OFAR4T --min-size ",numberInstances," --max-size ",numberInstances," --desired-capacity ", numberInstances))
for(i in 1:nrow(new_sras)){
counter = counter+1
sid = new_sras[i,7]
uid = digest(new_sras[i,3])
datalink = paste0("ftp://ftp-trace.ncbi.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/",substr(new_sras[i,3], 1,6),"/",new_sras[i,3],"/",new_sras[i,3],".sra")
parameters = "organism:human"
status = "waiting"
if(new_sras[i,5] == "10090"){
parameters = "organism:mouse"
}
sqlbuffer = paste0(sqlbuffer, sprintf("('%s', '%s', '%s', '%s', '%s', '%s'),", sid, uid, "seq-results", datalink, parameters, status))
if(counter > 100){
sql = paste0("INSERT INTO sequencing (id, uid, resultbucket, datalinks, parameters, status) VALUES ", sqlbuffer)
sql = paste0(substr(sql, 1, nchar(sql)-1), ";")
rs = dbSendQuery(mydb, sql)
sqlbuffer = ""
counter = 0
}
}
sql = paste0("INSERT INTO sequencing (id, uid, resultbucket, datalinks, parameters, status) VALUES ", sqlbuffer)
sql = paste0(substr(sql, 1, nchar(sql)-1), ";")
rs = dbSendQuery(mydb, sql)
library("limma")
library("GEOquery")
help(package="rhdf5")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
